// Generated by CoffeeScript 2.0.2
// # Ambari repository version add

// Add a repository version for given stack [REST API v2](https://github.com/apache/ambari/blob/trunk/ambari-server/docs/api/v1)
// The stack should exist as the target version

// * `password` (string)
//   Ambari Administrator password.
// * `url` (string)   
//   Ambari External URL.
// * `username` (string)
//   Ambari Administrator username.
// * `cluster_name` (string)   
//   Name of the cluster, optional
// * `stack_name` (string)   
//   name of the stack, required.
// * `stack_version` (string)   
//   version of the stack, required.  
// * `stack_name` (string)   
//   name of the stack, required.
// * `repository_version` (string)   
//   Fulle version of the target repository, required.  
// * `display_name` (string)   
//   display strong for the full version, required.  
// * `repositories` (object)
//     an object representing the repositories.
//     the key should be the operating system
//     the value should be an object containing all os' related repositories

// ## Exemple

// ```js
// nikita
// .stacks.repository_version_add({
//   "username": 'ambari_admin',
//   "password": 'ambari_secret',
//   "url": "http://ambari.server.com",
//   "cluster_name": 'my_cluster'
//   "name": 'HDFS'
//   }
// }, function(err, status){
//   console.log( err ? err.message : "Node Added To Cluster: " + status)
// })
// ```

// ## Source Code
var utils;

module.exports = function(options, callback) {
  var do_end, err, error, hostname, href, opts, path, port, status;
  error = null;
  status = false;
  href = null;
  if (options.debug == null) {
    options.debug = false;
  }
  do_end = function() {
    if (callback != null) {
      return callback(error, status, href);
    }
    return new Promise(function(fullfil, reject) {
      if (error != null) {
        reject(error);
      }
      return fullfil(status, href);
    });
  };
  try {
    if (!options.username) {
      throw Error('Required Options: username');
    }
    if (!options.password) {
      throw Error('Required Options: password');
    }
    if (!options.url) {
      throw Error('Required Options: url');
    }
    if (!options.stack_name) {
      throw Error('Required Options: stack_name');
    }
    if (!options.stack_version) {
      throw Error('Required Options: stack_version');
    }
    if (!options.display_name) {
      throw Error('Required Options: display_name');
    }
    if (!options.repository_version) {
      throw Error('Required Options: repository_version');
    }
    if (!options.cluster_name) {
      throw Error('Required Options: cluster_name');
    }
    if (!options.repositories) {
      throw Error('Required Options: repositories');
    }
    [hostname, port] = options.url.split("://")[1].split(':');
    if (options.sslEnabled == null) {
      options.sslEnabled = options.url.split('://')[0] === 'https';
    }
    path = `/api/v1/stacks/${options.stack_name}/versions/${options.stack_version}/repository_versions`;
    opts = {
      hostname: hostname,
      port: port,
      rejectUnauthorized: false,
      headers: utils.headers(options),
      sslEnabled: options.sslEnabled
    };
    opts['method'] = 'GET';
    opts.path = `${path}/${options.name}`;
    return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
      var already_exist, i, len, ref, repository;
      try {
        if (err) {
          throw err;
        }
        response = JSON.parse(response);
        if (parseInt(statusCode) !== 200) {
          throw Error(response.message);
        }
        already_exist = false;
        ref = response.items;
        for (i = 0, len = ref.length; i < len; i++) {
          repository = ref[i];
          if ((repository.stack_name === options.stack_name) && (repository.stack_version === options.stack_version)) {
            already_exist = true;
            href = item.href;
            break;
          }
        }
        if (already_exist) {
          return do_end();
        }
        opts['method'] = 'POST';
        return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
          if (err) {
            error = err;
          }
          status = true;
          return do_end();
        });
      } catch (error1) {
        err = error1;
        error = err;
        return do_end();
      }
    });
  } catch (error1) {
    err = error1;
    error = err;
    return do_end();
  }
};

// ## Depencendies
utils = require('../utils');
