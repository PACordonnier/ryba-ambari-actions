// Generated by CoffeeScript 2.1.1
// Ncurl -u admin:$PASSWORD -i -H 'X-Requested-By: ambari' -X PUT -d '{"HostRoles": {"state": "STARTED"}}' http://AMBARI_SERVER_HOST:8080/api/v1/clusters/CLUSTER_NAME/hosts/NEW_HOST_ADDED/host_components/GANGLIA_MONITOR

// # Ambari Wait Component Status

// Wait until a component reahes the status on a host [REST API v2](https://github.com/apache/ambari/blob/trunk/ambari-server/docs/api/v1)
// The service and the node should exist

// * `password` (string)
//   Ambari Administrator password.
// * `url` (string)   
//   Ambari External URL.
// * `username` (string)
//   Ambari Administrator username.
// * `cluster_name` (string)   
//   Name of the cluster, optional
// * `hostname` (string)   
//   The name of host to start the component to.
// * `name` (string)   
//   alias  on component_name option.
// * `component_name` (string)   
//   The name of component to start. Mandatory
// * `status` (string)   
//   Component's state. Mandatory
// * `timeout` (string)
//   timeout in millisecond to wait, default to 10 mins.

// ## Exemple

// ```js
// .hosts.component_status({
//   "username": 'ambari_admin',
//   "password": 'ambari_secret',
//   "url": "http://ambari.server.com",
//   "component_name": 'NAMENODE'
//   "status": "STARTED"
//   "hostname": 'master1.metal.ryba'
//   }
// }, function(err, status){
//   console.log( err ? err.message : "Component" + options.component_name + "Waited: " + status)
// })
// ```

// ## Source Code
var utils;

module.exports = function(options, callback) {
  var do_end, do_request, err, error, hostname, interval, opts, path, port, status, waited;
  error = null;
  status = false;
  if (options.debug == null) {
    options.debug = false;
  }
  interval = null;
  if (options.timeout == null) {
    options.timeout = 10 * 60 * 60 * 1000;
  }
  do_end = function() {
    if (interval != null) {
      clearInterval(interval);
    }
    if (callback != null) {
      return callback(error, status);
    }
    return new Promise(function(fullfil, reject) {
      if (error != null) {
        reject(error);
      }
      return fullfil(status);
    });
  };
  try {
    if (options.component_name == null) {
      options.component_name = options.name;
    }
    if (!options.username) {
      throw Error('Required Options: username');
    }
    if (!options.password) {
      throw Error('Required Options: password');
    }
    if (!options.url) {
      throw Error('Required Options: url');
    }
    if (!options.component_name) {
      throw Error('Required Options: component_name');
    }
    if (!options.hostname) {
      throw Error('Required Options: hostname');
    }
    if (!options.cluster_name) {
      throw Error('Required Options: cluster_name');
    }
    if (!options.status) {
      throw Error('Required Options: status');
    }
    [hostname, port] = options.url.split("://")[1].split(':');
    if (options.sslEnabled == null) {
      options.sslEnabled = options.url.split('://')[0] === 'https';
    }
    path = `/api/v1/clusters/${options.cluster_name}/hosts/${options.hostname}/host_components/${options.component_name}`;
    opts = {
      hostname: hostname,
      port: port,
      rejectUnauthorized: false,
      headers: utils.headers(options),
      sslEnabled: options.sslEnabled
    };
    opts['method'] = 'GET';
    opts.path = `${path}`;
    waited = 0;
    if (options != null) {
      options.log({
        message: `Wait Component to be available hostname:${options.hostname} component: ${options.component_name}`,
        level: 'INFO',
        module: 'ryba-ambari-actions/hosts/component_wait'
      });
    }
    do_request = function() {
      return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
        var state;
        try {
          if (err) {
            throw err;
          }
          waited = waited + 5000;
          response = JSON.parse(response);
          if (parseInt(statusCode) === 404) {
            throw Error(`Component ${options.component_name} does not exist on host: ${options.fqdn}`);
          }
          state = response['HostRoles']['state'];
          if (state.toUpperCase() === options.status.toUpperCase()) {
            if (options != null) {
              options.log({
                message: `Ok: Component in state ${options.status}  hostname:${options.hostname} component: ${options.component_name}`,
                level: 'INFO',
                module: 'ryba-ambari-actions/hosts/component_wait'
              });
            }
            if (options != null) {
              options.log({
                message: "Clearing Interval",
                level: 'INFO',
                module: 'ryba-ambari-actions/hosts/component_wait'
              });
            }
            if (interval) {
              clearInterval(interval);
            }
            return do_end();
          } else {
            if (waited > options.timeout) {
              return do_end();
            }
            return options != null ? options.log({
              message: `Component not in state ${options.status}  hostname:${options.hostname} component: ${options.component_name}`,
              level: 'INFO',
              module: 'ryba-ambari-actions/hosts/component_wait'
            }) : void 0;
          }
        } catch (error1) {
          err = error1;
          return error = err;
        }
      });
    };
    if (options != null) {
      options.log({
        message: "Set Wait Interval 5000ms",
        level: 'INFO',
        module: 'ryba-ambari-actions/hosts/component_wait'
      });
    }
    return interval = setInterval(do_request, 5000);
  } catch (error1) {
    err = error1;
    error = err;
    return do_end();
  }
};

// ## Depencendies
utils = require('../utils');
