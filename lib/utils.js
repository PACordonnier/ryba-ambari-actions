// Generated by CoffeeScript 2.0.2
// 'use strict'
var http, https;

module.exports = {
  headers: function(options) {
    var headers;
    headers = {
      'X-Requested-By': 'ambari',
      "cache-control": "no-cache"
    };
    if (options.username && options.password) {
      if (headers['Authorization'] == null) {
        headers['Authorization'] = 'Basic ' + new Buffer(options.username + ':' + options.password).toString('base64');
      }
    }
    return headers;
  },
  doRequestWithOptions: function(options, callback) {
    var base, base1, err, http_maker, opts, ref, request, response_object;
    if (options.hostname == null) {
      throw Error('Missin hostname');
    }
    if (options.port == null) {
      throw Error('Missing port');
    }
    if (options.method == null) {
      throw Error('Missing method');
    }
    if ((ref = options.method) !== 'GET' && ref !== 'POST' && ref !== 'PUT' && ref !== 'DELETE') {
      throw Error('Invalid method');
    }
    if (options.path == null) {
      throw Error('Mssing path');
    }
    if (callback != null) {
      try {
        opts = {
          hostname: options.hostname,
          port: options.port,
          path: `${options.path}`,
          method: options.method,
          headers: options.headers
        };
        response_object = '';
        //ssl
        if (options.sslEnabled) {
          opts['rejectUnauthorized'] = options.rejectUnauthorized;
        }
        //headers
        if (opts.headers == null) {
          opts.headers = {};
        }
        if (options.json) {
          if ((base = opts.headers)['Content-Type'] == null) {
            base['Content-Type'] = 'application/json';
          }
        }
        if (options.content != null) {
          if ((base1 = opts.headers)['Content-Length'] == null) {
            base1['Content-Length'] = options.content.length;
          }
        }
        http_maker = options.sslEnabled ? https : http;
        console.log(opts);
        request = http_maker.request(opts, function(res) {
          res.on('data', function(data) {
            return response_object += data;
          });
          res.on('end', function() {
            var err, error;
            try {
              console.log(response_object);
              if (options.json) {
                response_object = JSON.parse(response_object);
              }
              error = null;
              // if res.statusCode not in [200,201]
              //   response_object = JSON.parse response_object
              //   error = Error "Error: #{response_object.message}" 
              return callback(error, res.statusCode, response_object);
            } catch (error1) {
              err = error1;
              return callback(err);
            }
          });
          return res.on('error', function(error) {
            return callback(error);
          });
        });
        if (options.content != null) {
          request.on('error', function(error) {
            return callback(error);
          });
          request.write(options.content);
          return request.end();
        } else {
          request.on('error', function(error) {
            return callback(error);
          });
          return request.end();
        }
      } catch (error1) {
        err = error1;
        return callback(err);
      }
    } else {
      return new Promise(function(fullfil, reject) {
        var base2, base3;
        try {
          opts = {
            hostname: options.hostname,
            port: options.port,
            path: options.path,
            method: options.method
          };
          response_object = '';
          //ssl
          if (options.sslEnabled) {
            opts['rejectUnauthorized'] = options.rejectUnauthorized;
          }
          //headers
          if (opts.headers == null) {
            opts.headers = {};
          }
          if (options.json) {
            if ((base2 = opts.headers)['Content-Type'] == null) {
              base2['Content-Type'] = 'application/json';
            }
          }
          if (options.content) {
            if ((base3 = opts.headers)['Content-Length'] == null) {
              base3['Content-Length'] = options.content.length;
            }
          }
          http_maker = options.sslEnabled ? https : http;
          request = http_maker.request(opts, function(res) {
            res.on('data', function(data) {
              return response_object += data;
            });
            res.on('end', function() {
              try {
                if (options.json) {
                  response_object = JSON.parse(response_object);
                }
                return fullfil(res.statusCode, response_object);
              } catch (error1) {
                err = error1;
                return reject(err);
              }
            });
            return res.on('error', function(error) {
              return reject(error);
            });
          });
          if (options.content != null) {
            request.on('error', function(error) {
              return reject(error);
            });
            request.write(options.content);
            return request.end();
          } else {
            request.on('error', function(error) {
              return reject(error);
            });
            return request.end();
          }
        } catch (error1) {
          err = error1;
          return reject(err);
        }
      });
    }
  }
};

// ## Dependencies
http = require('http');

https = require('https');
