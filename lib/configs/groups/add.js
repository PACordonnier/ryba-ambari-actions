// Generated by CoffeeScript 2.1.1
// # Ambari Configs Groups

// Create ambari config groups [REST API v2](https://github.com/apache/ambari/blob/trunk/ambari-server/docs/api/v1)

// * `password` (string)
//   Ambari Administrator password.
// * `url` (string)   
//   Ambari External URL.
// * `username` (string)
//   Ambari Administrator username.
// * `cluster_name` (string)   
//   Name of the cluster, required
// * `group_name` (string)   
//   The config groups name, required
// * `description` (string)   
//   description associated to config group
// * `tag` (string)   
//   tag of the config groups, required
//   Tha tag is wht identified uniquely on admin side the config groups
// * `hosts` (string|array)   
//   hosts which should belong to config group.
// * `desired_configs` (object|array)   
//   The object describing files types and properties.
//   the key is the configuration_type, value are the properties.

// ## Exemple

// ```js
// configs.groups({
//   "username": 'ambari_admin',
//   "password": 'ambari_secret',
//   "url": "http://ambari.server.com",
//   "cluster_name": 'ryba_test',
//   "group_name": "compute_worker"
//   "tag": "a tag"
//   "description": "yarn high compute power"
//   "hosts": ['worker01.metal.ryba']
//   "desired_configs": {
//     "type: "hdfs-site",
//     "tag": "advances hdfs site",
//     "properties": {
//       "datanode.dir": "[DISK]file://data/1/hdfs"
//       }  
//   }
//   }
// }, function(err, status){
//   console.log( err ? err.message : "Config groups CREATED/UPDATED: " + status)
// })
// ```

// ## Source Code
// This functions does a single post request with desired_configs and config_group.
// Hosts can be empty as the config group can be uptade with a later PUT request.
var merge, path, utils;

module.exports = function(options, callback) {
  var config, do_end, err, error, hostname, i, k, len, newConfigGroup, opts, path, port, ref, status, v;
  if (options.debug) {
    process.stdout.write("Entering config.grous.add\n");
  }
  error = null;
  status = false;
  if (options.debug == null) {
    options.debug = false;
  }
  if (options.merge == null) {
    options.merge = true;
  }
  do_end = function() {
    if (callback != null) {
      return callback(error, status);
    }
    return new Promise(function(fullfil, reject) {
      if (error != null) {
        reject(error);
      }
      return fullfil(status);
    });
  };
  try {
    if (!options.username) {
      throw Error('Required Options: username');
    }
    if (!options.password) {
      throw Error('Required Options: password');
    }
    if (!options.url) {
      throw Error('Required Options: url');
    }
    if (!options.cluster_name) {
      throw Error('Required Options: cluster_name');
    }
    if (!options.group_name) {
      throw Error('Required Options: group_name');
    }
    if (!options.tag) {
      throw Error('Required Options: tag');
    }
    if (!options.desired_configs) {
      throw Error('Required Options: desired_configs');
    }
    if (!Array.isArray(options.desired_configs)) {
      options.desired_configs = [options.desired_configs];
    }
    if (options.hosts == null) {
      options.hosts = [];
    }
    if (options.description == null) {
      options.description = `config group cluster: ${options.cluster_name} group ${options.group_name}`;
    }
    [hostname, port] = options.url.split("://")[1].split(':');
    if (options.sslEnabled == null) {
      options.sslEnabled = options.url.split('://')[0] === 'https';
    }
    path = `/api/v1/clusters/${options.cluster_name}`;
    opts = {
      hostname: hostname,
      port: port,
      rejectUnauthorized: false,
      headers: utils.headers(options),
      sslEnabled: options.sslEnabled
    };
    ref = options.desired_configs;
    //check desired_configs keys
    for (i = 0, len = ref.length; i < len; i++) {
      config = ref[i];
      for (k in config) {
        v = config[k];
        if (!config.type) {
          throw Error(Missing("config.type"));
        }
        if (!config.tag) {
          throw Error(Missing("config.tag"));
        }
        if (!config.properties) {
          throw Error(Missing("config.properties"));
        }
      }
    }
    opts['method'] = 'POST';
    opts.path = `${path}/config_groups`;
    newConfigGroup = {
      ConfigGroup: {
        cluster_name: options.cluster_name,
        group_name: options.group_name,
        tag: options.tag,
        description: options.description,
        hosts: options.hosts,
        desired_configs: options.desired_configs
      }
    };
    opts.content = JSON.stringify(newConfigGroup);
    if (options.debug) {
      process.stdout.write(`config.grous.add: post configGroup ${options.group_name}\n`);
    }
    // opts.json = true
    return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
      try {
        if (err) {
          throw err;
        }
        response = JSON.parse(response);
        switch (parseInt(statusCode)) {
          case 201:
            if (options.debug) {
              process.stdout.write(`config.grous.add: created configGroup ${options.config_name}\n`);
            }
            status = true;
            return do_end();
          case 409:
            status = false;
            return do_end();
          default:
            throw Error(response.message);
        }
      } catch (error1) {
        err = error1;
        error = err;
        return do_end();
      }
    });
  } catch (error1) {
    err = error1;
    error = err;
    return do_end();
  }
};

// ## Depencendies
utils = require('../../utils');

path = require('path');

({merge} = require('nikita/lib/misc'));
